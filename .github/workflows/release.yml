name: Chrome Extension Packager

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - uses: actions/checkout@v4

      # 2. Get and calculate version
      - id: get_version
        run: |
          # Extract base version from manifest.json
          VERSION_RAW=$(jq -r '.version' src/manifest.json)
          echo "Base version from manifest.json: $VERSION_RAW"

          # Parse version parts (major.minor.patch)
          IFS='.' read -r MAJOR MINOR PATCH <<<"${VERSION_RAW}"

          # Default patch to 0 if empty
          if [ -z "$PATCH" ]; then
            PATCH=0
          fi

          echo "GitHub Event Name: $GITHUB_EVENT_NAME"

          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            # Manual run: add 0.0001 to patch
            NEW_PATCH=$(echo "$PATCH + 0.0001" | bc -l)
            NEW_PATCH_FORMATTED=$(printf "%.6f" "$NEW_PATCH" | sed 's/^0*//')
            FINAL_VERSION="${MAJOR}.${MINOR}${NEW_PATCH_FORMATTED}"
            echo "Manual run: bump patch by 0.0001 to $NEW_PATCH_FORMATTED"

          else
            # Push event: check if manifest.json changed in last commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || true)
            echo "Changed files in last commit:"
            echo "$CHANGED_FILES"

            if echo "$CHANGED_FILES" | grep -q "^src/manifest.json$"; then
              echo "manifest.json changed, use base version $VERSION_RAW"
              FINAL_VERSION=$VERSION_RAW
            else
              # bump patch by 0.01
              NEW_PATCH=$(echo "$PATCH + 0.01" | bc -l)
              NEW_PATCH_FORMATTED=$(printf "%.2f" "$NEW_PATCH" | sed 's/^0*//')
              FINAL_VERSION="${MAJOR}.${MINOR}${NEW_PATCH_FORMATTED}"
              echo "manifest.json NOT changed, bump patch by 0.01 to $NEW_PATCH_FORMATTED"
            fi
          fi

          echo "Computed final version: $FINAL_VERSION"
          echo "VERSION=$FINAL_VERSION" >> $GITHUB_ENV
          
      # 2.1 Update version in manifest.json (without committing)
      - name: Update manifest.json version
        run: |
          jq --arg v "${VERSION}" '.version = $v' src/manifest.json > src/manifest.tmp.json
          mv src/manifest.tmp.json src/manifest.json
          echo "Updated manifest.json to version ${VERSION}"

          
      # 3. Install Chromium-based Browsers
      - name: Install Chromium-based Browsers
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg software-properties-common

          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

          sudo apt-get install -y chromium-browser

      # 4. Create ZIP Package
      - name: Package ZIP
        run: |
          cd src
          zip -r ../ChromeExtension_v${VERSION}.zip *
          cd ..

      # 5. Create CRX Package
      - name: Package CRX
        env:
          PRIVATE_KEY: ${{ secrets.EXTENSION_KEY }}
        run: |
          if [ -z "$PRIVATE_KEY" ]; then
            echo "Warning: No private key found, skipping CRX creation"
            touch ChromeExtension_v${VERSION}.crx
          else
            echo "$PRIVATE_KEY" > key.pem

            if command -v google-chrome > /dev/null; then
              BROWSER_CLI="google-chrome"
            elif command -v chromium-browser > /dev/null; then
              BROWSER_CLI="chromium-browser"
            else
              echo "‚ùå No Chromium-based browser with --pack-extension found"
              exit 1
            fi

            "$BROWSER_CLI" --no-sandbox --pack-extension=./src --pack-extension-key=key.pem
            mv src.crx ChromeExtension_v${VERSION}.crx
            rm key.pem
          fi

      # 6. Upload Artifacts (optional)
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ChromeExtension-build
          path: |
            ChromeExtension_v${{ env.VERSION }}.zip
            ChromeExtension_v${{ env.VERSION }}.crx

      # 7. Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: "ChromeExtension v${{ env.VERSION }}"
          body: "Automatically built extension version ${{ env.VERSION }}"
          files: |
            ChromeExtension_v${{ env.VERSION }}.zip
            ChromeExtension_v${{ env.VERSION }}.crx
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
