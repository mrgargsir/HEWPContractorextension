name: Chrome Extension Packager

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Determine Version
        id: get_version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        run: |
          get_highest_version() {
          V1=$1
          V2=$2
          printf "%s\n%s" "$V1" "$V2" | sort -t. -k1,1n -k2,2n -k3,3n | tail -n 1
          }

          VERSION_RAW=$(jq -r '.version' src/manifest.json)
          echo "Base version from manifest.json: $VERSION_RAW"

          RELEASE_VERSION=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' | sed 's/^v//' || echo "")
          echo "Latest GitHub Release: $RELEASE_VERSION"

          if [ -z "$RELEASE_VERSION" ]; then
          HIGH_VERSION=$VERSION_RAW
          else
          HIGH_VERSION=$(get_highest_version "$VERSION_RAW" "$RELEASE_VERSION")
         fi

          IFS='.' read -r MAJOR MINOR PATCH <<< "$HIGH_VERSION"
          PATCH=${PATCH:-0}
          MAJOR=$((10#$MAJOR))
          MINOR=$((10#$MINOR))
          PATCH=$((10#$PATCH))

          echo "GitHub Event Name: $GITHUB_EVENT_NAME"

          if git rev-parse HEAD~1 >/dev/null 2>&1; then
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          else
          CHANGED_FILES=$(git diff --name-only HEAD)
          fi

          echo "Changed files: $CHANGED_FILES"

          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
          PATCH=$((PATCH + 1))
          elif echo "$CHANGED_FILES" | grep -q "^src/manifest.json$"; then
          PATCH=0
          else
          MINOR=$((MINOR + 1))
          PATCH=0
          fi

          FINAL_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "Computed final version: $FINAL_VERSION"
          echo "VERSION=$FINAL_VERSION" >> $GITHUB_ENV

      - name: Update manifest.json version
        run: |
          jq --arg v "$VERSION" '.version = $v' src/manifest.json > src/manifest.tmp.json
          mv src/manifest.tmp.json src/manifest.json

      - name: Package ZIP
        run: |
          cd src
          zip -r ../ChromeExtension_v${VERSION}.zip *
          cd ..

      - name: Package CRX
        env:
          PRIVATE_KEY: ${{ secrets.EXTENSION_KEY }}
        run: |
          if [ -z "$PRIVATE_KEY" ]; then
            echo "⚠️ No private key found. Skipping CRX creation."
            touch ChromeExtension_v${VERSION}.crx
          else
            echo "$PRIVATE_KEY" > key.pem
            if command -v google-chrome > /dev/null; then
              google-chrome --no-sandbox --pack-extension=./src --pack-extension-key=key.pem
            elif command -v chromium-browser > /dev/null; then
              chromium-browser --no-sandbox --pack-extension=./src --pack-extension-key=key.pem
            else
              echo "❌ No Chromium browser found"
              exit 1
            fi
            mv src.crx ChromeExtension_v${VERSION}.crx
            rm key.pem
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ChromeExtension-build
          path: |
            ChromeExtension_v${{ env.VERSION }}.zip
            ChromeExtension_v${{ env.VERSION }}.crx

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: "ChromeExtension v${{ env.VERSION }}"
          body: "Automatically built extension version ${{ env.VERSION }}"
          files: |
            ChromeExtension_v${{ env.VERSION }}.zip
            ChromeExtension_v${{ env.VERSION }}.crx
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
