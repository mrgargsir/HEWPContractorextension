name: Chrome Extension Packager

on:
  push:
    branches: [main]
    paths: ['src/manifest.json']

permissions:
  contents: write
  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - uses: actions/checkout@v4

      # 2. Read version from manifest.json
      - id: get_version
        run: |
          VERSION=$(jq -r '.version' src/manifest.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"

      # 3. Install Chromium-based Browsers
      - name: Install Chromium-based Browsers
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg software-properties-common

          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

          sudo apt-get install -y chromium-browser

      # 4. Create ZIP Package
      - name: Package ZIP
        run: |
          cd src
          zip -r ../ChromeExtension_v${VERSION}.zip *
          cd ..

      # 5. Create CRX Package
      - name: Package CRX
        env:
          PRIVATE_KEY: ${{ secrets.EXTENSION_KEY }}
        run: |
          if [ -z "$PRIVATE_KEY" ]; then
            echo "Warning: No private key found, skipping CRX creation"
            touch ChromeExtension_v${VERSION}.crx
          else
            echo "$PRIVATE_KEY" > key.pem

            if command -v google-chrome > /dev/null; then
              BROWSER_CLI="google-chrome"
            elif command -v chromium-browser > /dev/null; then
              BROWSER_CLI="chromium-browser"
            else
              echo "‚ùå No Chromium-based browser with --pack-extension found"
              exit 1
            fi

            "$BROWSER_CLI" --no-sandbox --pack-extension=./src --pack-extension-key=key.pem
            mv src.crx ChromeExtension_v${VERSION}.crx
            rm key.pem
          fi

      # 6. Upload Artifacts (optional)
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ChromeExtension-build
          path: |
            ChromeExtension_v${{ env.VERSION }}.zip
            ChromeExtension_v${{ env.VERSION }}.crx

      # 7. Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: "ChromeExtension v${{ env.VERSION }}"
          body: "Automatically built extension version ${{ env.VERSION }}"
          files: |
            ChromeExtension_v${{ env.VERSION }}.zip
            ChromeExtension_v${{ env.VERSION }}.crx
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
