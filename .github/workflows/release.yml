name: Chrome Extension Packager

on:
  push:
    branches: [main]
    paths: ['src/**']

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - uses: actions/checkout@v4

      # 2. Install Chromium-based Browsers
      - name: Install Chromium-based Browsers
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg software-properties-common

          # Google Chrome
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

          # Chromium (fallback)
          sudo apt-get install -y chromium-browser

      # 3. Verify Installed Browsers
      - name: Verify Browser Installations
        run: |
          google-chrome --version || true
          chromium-browser --version || true

      # 4. Create ZIP Package
      - name: Package ZIP
        run: |
          cd src
          zip -r ../extension_${{ github.sha }}.zip *
          cd ..
          ls -la

      # 5. Create CRX Package
      - name: Package CRX
        env:
          PRIVATE_KEY: ${{ secrets.EXTENSION_KEY }}
        run: |
          if [ -z "$PRIVATE_KEY" ]; then
            echo "Warning: No private key found, skipping CRX creation"
            touch extension_${{ github.sha }}.crx
          else
            echo "$PRIVATE_KEY" > key.pem

            # Determine which browser CLI is available
            if command -v google-chrome > /dev/null; then
              BROWSER_CLI="google-chrome"
            elif command -v chromium-browser > /dev/null; then
              BROWSER_CLI="chromium-browser"
            elif command -v microsoft-edge > /dev/null; then
              BROWSER_CLI="microsoft-edge"
            else
              echo "‚ùå No Chromium-based browser with --pack-extension found"
              exit 1
            fi

            echo "Using $BROWSER_CLI to create CRX"
            "$BROWSER_CLI" --no-sandbox --pack-extension=./src --pack-extension-key=key.pem

            mv src.crx extension_${{ github.sha }}.crx
            rm key.pem
          fi
          ls -la

      # 6. Upload Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build
          path: |
            extension_${{ github.sha }}.zip
            extension_${{ github.sha }}.crx
          retention-days: 7
          if-no-files-found: warn

      # 7. Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: success() || failure()
        with:
          tag_name: v${{ github.sha }}
          name: "Extension v${{ github.sha }}"
          body: "Automatically built extension packages"
          files: |
            extension_${{ github.sha }}.zip
            extension_${{ github.sha }}.crx
          draft: false
          prerelease: false
