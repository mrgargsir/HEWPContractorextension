name: Chrome Extension Packager

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
       # Fetch full Git history (fix for HEAD^ error)
      - name: Fetch full Git history
        run: git fetch --unshallow || true

        # Determine Version (Push/Manual)
      - name: Determine Version
        id: get_version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Function to compare versions and return highest
          get_highest_version() {
            V1=$1
            V2=$2
            printf "%s\n%s" "$V1" "$V2" | sort -t. -k1,1n -k2,2n -k3,3n | tail -n 1
          }

          VERSION_RAW=$(jq -r '.version' src/manifest.json)
          echo "Base version from manifest.json: $VERSION_RAW"

          # Get latest release tag (e.g. 02.12.003) from GitHub releases via CLI
          RELEASE_VERSION=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")
          echo "Latest GitHub Release: $RELEASE_VERSION"

          if [ -z "$RELEASE_VERSION" ]; then
            HIGH_VERSION=$VERSION_RAW
          else
            HIGH_VERSION=$(get_highest_version "$VERSION_RAW" "$RELEASE_VERSION")
          fi

          # Parse version parts, default patch to 0
          IFS='.' read -r MAJOR MINOR PATCH <<< "$HIGH_VERSION"
          PATCH=${PATCH:-0}

          # Convert parts to integers to remove any leading zeros
          MAJOR=$((10#$MAJOR))
          MINOR=$((10#$MINOR))
          PATCH=$((10#$PATCH))

          echo "GitHub Event: $GITHUB_EVENT_NAME"
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"

          # If BEFORE commit invalid (like first commit), fallback to root commit
          if [ -z "$BEFORE" ] || ! git cat-file -e "$BEFORE^{commit}" 2>/dev/null; then
            BEFORE=$(git rev-list --max-parents=0 HEAD | tail -n1)
          fi

          # Get changed files between commits
          CHANGED_FILES=$(git diff --name-only "$BEFORE" "$AFTER" || true)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Increment version parts based on event or changed files
          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            PATCH=$((PATCH + 1))
          elif echo "$CHANGED_FILES" | grep -q "^src/manifest.json$"; then
            PATCH=0
          else
            MINOR=$((MINOR + 1))
            PATCH=0
          fi

          FINAL_VERSION="${MAJOR}.${MINOR}.${PATCH}"

          echo "Computed final version: $FINAL_VERSION"
          echo "VERSION=$FINAL_VERSION" >> $GITHUB_ENV


      - name: Debug VERSION
        run: echo "VERSION=$VERSION"

      - name: Update manifest.json version
        run: |
          jq --arg v "${VERSION}" '.version = $v' src/manifest.json > src/manifest.tmp.json
          mv src/manifest.tmp.json src/manifest.json
          echo "Updated manifest.json to version ${VERSION}"

      - name: Install Chromium-based Browsers
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg software-properties-common
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          sudo apt-get install -y chromium-browser

      - name: Package ZIP
        run: |
          cd src
          zip -r ../ChromeExtension_v${VERSION}.zip *
          cd ..

      - name: Package CRX
        env:
          PRIVATE_KEY: ${{ secrets.EXTENSION_KEY }}
        run: |
          if [ -z "$PRIVATE_KEY" ]; then
            echo "Warning: No private key found, skipping CRX creation"
            touch ChromeExtension_v${VERSION}.crx
          else
            echo "$PRIVATE_KEY" > key.pem
            if command -v google-chrome > /dev/null; then
              BROWSER_CLI="google-chrome"
            elif command -v chromium-browser > /dev/null; then
              BROWSER_CLI="chromium-browser"
            else
              echo "‚ùå No Chromium-based browser found"
              exit 1
            fi
            "$BROWSER_CLI" --no-sandbox --pack-extension=./src --pack-extension-key=key.pem
            mv src.crx ChromeExtension_v${VERSION}.crx
            rm key.pem
          fi

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ChromeExtension-build
          path: |
            ChromeExtension_v${{ env.VERSION }}.zip
            ChromeExtension_v${{ env.VERSION }}.crx

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: "ChromeExtension v${{ env.VERSION }}"
          body: "Automatically built extension version ${{ env.VERSION }}"
          files: |
            ChromeExtension_v${{ env.VERSION }}.zip
            ChromeExtension_v${{ env.VERSION }}.crx
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
